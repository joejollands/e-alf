/*
* generated by Xtext
*/
package ro.ubbcluj.cs.ealf.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import ro.ubbcluj.cs.ealf.services.EAlfGrammarAccess;

public class EAlfParser extends AbstractContentAssistParser {
	
	@Inject
	private EAlfGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected ro.ubbcluj.cs.ealf.ui.contentassist.antlr.internal.InternalEAlfParser createParser() {
		ro.ubbcluj.cs.ealf.ui.contentassist.antlr.internal.InternalEAlfParser result = new ro.ubbcluj.cs.ealf.ui.contentassist.antlr.internal.InternalEAlfParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPackageableElementAccess().getAlternatives(), "rule__PackageableElement__Alternatives");
					put(grammarAccess.getString0Access().getAlternatives(), "rule__String0__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getValueSpecificationAccess().getAlternatives(), "rule__ValueSpecification__Alternatives");
					put(grammarAccess.getVisibilityKindAccess().getAlternatives(), "rule__VisibilityKind__Alternatives");
					put(grammarAccess.getParameterDirectionKindAccess().getAlternatives(), "rule__ParameterDirectionKind__Alternatives");
					put(grammarAccess.getAggregationKindAccess().getAlternatives(), "rule__AggregationKind__Alternatives");
					put(grammarAccess.getCallConcurrencyKindAccess().getAlternatives(), "rule__CallConcurrencyKind__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_3(), "rule__Model__Group_3__0");
					put(grammarAccess.getPackage_ImplAccess().getGroup(), "rule__Package_Impl__Group__0");
					put(grammarAccess.getPackage_ImplAccess().getGroup_3(), "rule__Package_Impl__Group_3__0");
					put(grammarAccess.getPackage_ImplAccess().getGroup_4(), "rule__Package_Impl__Group_4__0");
					put(grammarAccess.getPackage_ImplAccess().getGroup_5(), "rule__Package_Impl__Group_5__0");
					put(grammarAccess.getPackage_ImplAccess().getGroup_5_3(), "rule__Package_Impl__Group_5_3__0");
					put(grammarAccess.getProperty_ImplAccess().getGroup(), "rule__Property_Impl__Group__0");
					put(grammarAccess.getProperty_ImplAccess().getGroup_3(), "rule__Property_Impl__Group_3__0");
					put(grammarAccess.getProperty_ImplAccess().getGroup_4(), "rule__Property_Impl__Group_4__0");
					put(grammarAccess.getProperty_ImplAccess().getGroup_5(), "rule__Property_Impl__Group_5__0");
					put(grammarAccess.getProperty_ImplAccess().getGroup_6(), "rule__Property_Impl__Group_6__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getOperationAccess().getGroup_3(), "rule__Operation__Group_3__0");
					put(grammarAccess.getOperationAccess().getGroup_4(), "rule__Operation__Group_4__0");
					put(grammarAccess.getOperationAccess().getGroup_5(), "rule__Operation__Group_5__0");
					put(grammarAccess.getOperationAccess().getGroup_6(), "rule__Operation__Group_6__0");
					put(grammarAccess.getOperationAccess().getGroup_7(), "rule__Operation__Group_7__0");
					put(grammarAccess.getClass_ImplAccess().getGroup(), "rule__Class_Impl__Group__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_3(), "rule__Class_Impl__Group_3__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_4(), "rule__Class_Impl__Group_4__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_5(), "rule__Class_Impl__Group_5__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_6(), "rule__Class_Impl__Group_6__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_7(), "rule__Class_Impl__Group_7__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_7_3(), "rule__Class_Impl__Group_7_3__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_8(), "rule__Class_Impl__Group_8__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_8_3(), "rule__Class_Impl__Group_8_3__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_9(), "rule__Class_Impl__Group_9__0");
					put(grammarAccess.getClass_ImplAccess().getGroup_9_3(), "rule__Class_Impl__Group_9_3__0");
					put(grammarAccess.getLiteralIntegerAccess().getGroup(), "rule__LiteralInteger__Group__0");
					put(grammarAccess.getLiteralIntegerAccess().getGroup_3(), "rule__LiteralInteger__Group_3__0");
					put(grammarAccess.getLiteralStringAccess().getGroup(), "rule__LiteralString__Group__0");
					put(grammarAccess.getLiteralStringAccess().getGroup_3(), "rule__LiteralString__Group_3__0");
					put(grammarAccess.getLiteralStringAccess().getGroup_4(), "rule__LiteralString__Group_4__0");
					put(grammarAccess.getLiteralBooleanAccess().getGroup(), "rule__LiteralBoolean__Group__0");
					put(grammarAccess.getLiteralBooleanAccess().getGroup_3(), "rule__LiteralBoolean__Group_3__0");
					put(grammarAccess.getLiteralUnlimitedNaturalAccess().getGroup(), "rule__LiteralUnlimitedNatural__Group__0");
					put(grammarAccess.getLiteralUnlimitedNaturalAccess().getGroup_3(), "rule__LiteralUnlimitedNatural__Group_3__0");
					put(grammarAccess.getLiteralNullAccess().getGroup(), "rule__LiteralNull__Group__0");
					put(grammarAccess.getLiteralNullAccess().getGroup_3(), "rule__LiteralNull__Group_3__0");
					put(grammarAccess.getModelAccess().getPackagedElementAssignment_2(), "rule__Model__PackagedElementAssignment_2");
					put(grammarAccess.getModelAccess().getPackagedElementAssignment_3_1(), "rule__Model__PackagedElementAssignment_3_1");
					put(grammarAccess.getPackage_ImplAccess().getNameAssignment_3_1(), "rule__Package_Impl__NameAssignment_3_1");
					put(grammarAccess.getPackage_ImplAccess().getVisibilityAssignment_4_1(), "rule__Package_Impl__VisibilityAssignment_4_1");
					put(grammarAccess.getPackage_ImplAccess().getPackagedElementAssignment_5_2(), "rule__Package_Impl__PackagedElementAssignment_5_2");
					put(grammarAccess.getPackage_ImplAccess().getPackagedElementAssignment_5_3_1(), "rule__Package_Impl__PackagedElementAssignment_5_3_1");
					put(grammarAccess.getProperty_ImplAccess().getNameAssignment_3_1(), "rule__Property_Impl__NameAssignment_3_1");
					put(grammarAccess.getProperty_ImplAccess().getVisibilityAssignment_4_1(), "rule__Property_Impl__VisibilityAssignment_4_1");
					put(grammarAccess.getProperty_ImplAccess().getIsStaticAssignment_5_1(), "rule__Property_Impl__IsStaticAssignment_5_1");
					put(grammarAccess.getProperty_ImplAccess().getTypeAssignment_6_1(), "rule__Property_Impl__TypeAssignment_6_1");
					put(grammarAccess.getOperationAccess().getNameAssignment_3_1(), "rule__Operation__NameAssignment_3_1");
					put(grammarAccess.getOperationAccess().getVisibilityAssignment_4_1(), "rule__Operation__VisibilityAssignment_4_1");
					put(grammarAccess.getOperationAccess().getIsStaticAssignment_5_1(), "rule__Operation__IsStaticAssignment_5_1");
					put(grammarAccess.getOperationAccess().getIsAbstractAssignment_6_1(), "rule__Operation__IsAbstractAssignment_6_1");
					put(grammarAccess.getOperationAccess().getConcurrencyAssignment_7_1(), "rule__Operation__ConcurrencyAssignment_7_1");
					put(grammarAccess.getClass_ImplAccess().getNameAssignment_3_1(), "rule__Class_Impl__NameAssignment_3_1");
					put(grammarAccess.getClass_ImplAccess().getVisibilityAssignment_4_1(), "rule__Class_Impl__VisibilityAssignment_4_1");
					put(grammarAccess.getClass_ImplAccess().getIsAbstractAssignment_5_1(), "rule__Class_Impl__IsAbstractAssignment_5_1");
					put(grammarAccess.getClass_ImplAccess().getIsActiveAssignment_6_1(), "rule__Class_Impl__IsActiveAssignment_6_1");
					put(grammarAccess.getClass_ImplAccess().getOwnedAttributeAssignment_7_2(), "rule__Class_Impl__OwnedAttributeAssignment_7_2");
					put(grammarAccess.getClass_ImplAccess().getOwnedAttributeAssignment_7_3_1(), "rule__Class_Impl__OwnedAttributeAssignment_7_3_1");
					put(grammarAccess.getClass_ImplAccess().getNestedClassifierAssignment_8_2(), "rule__Class_Impl__NestedClassifierAssignment_8_2");
					put(grammarAccess.getClass_ImplAccess().getNestedClassifierAssignment_8_3_1(), "rule__Class_Impl__NestedClassifierAssignment_8_3_1");
					put(grammarAccess.getClass_ImplAccess().getOwnedOperationAssignment_9_2(), "rule__Class_Impl__OwnedOperationAssignment_9_2");
					put(grammarAccess.getClass_ImplAccess().getOwnedOperationAssignment_9_3_1(), "rule__Class_Impl__OwnedOperationAssignment_9_3_1");
					put(grammarAccess.getLiteralIntegerAccess().getNameAssignment_3_1(), "rule__LiteralInteger__NameAssignment_3_1");
					put(grammarAccess.getLiteralIntegerAccess().getValueAssignment_5(), "rule__LiteralInteger__ValueAssignment_5");
					put(grammarAccess.getLiteralStringAccess().getNameAssignment_3_1(), "rule__LiteralString__NameAssignment_3_1");
					put(grammarAccess.getLiteralStringAccess().getValueAssignment_4_1(), "rule__LiteralString__ValueAssignment_4_1");
					put(grammarAccess.getLiteralBooleanAccess().getNameAssignment_3_1(), "rule__LiteralBoolean__NameAssignment_3_1");
					put(grammarAccess.getLiteralBooleanAccess().getValueAssignment_5(), "rule__LiteralBoolean__ValueAssignment_5");
					put(grammarAccess.getLiteralUnlimitedNaturalAccess().getNameAssignment_3_1(), "rule__LiteralUnlimitedNatural__NameAssignment_3_1");
					put(grammarAccess.getLiteralUnlimitedNaturalAccess().getValueAssignment_5(), "rule__LiteralUnlimitedNatural__ValueAssignment_5");
					put(grammarAccess.getLiteralNullAccess().getNameAssignment_3_1(), "rule__LiteralNull__NameAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			ro.ubbcluj.cs.ealf.ui.contentassist.antlr.internal.InternalEAlfParser typedParser = (ro.ubbcluj.cs.ealf.ui.contentassist.antlr.internal.InternalEAlfParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EAlfGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EAlfGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
