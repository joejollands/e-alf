/*
* generated by Xtext
*/

package ro.ubbcluj.cs.ealf.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EAlfGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PackageableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackage_ImplParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClass_ImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActivityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PackageableElement returns uml::PackageableElement:
		//	Model | Package_Impl | Class_Impl | Activity;
		public ParserRule getRule() { return rule; }

		//Model | Package_Impl | Class_Impl | Activity
		public Alternatives getAlternatives() { return cAlternatives; }

		//Model
		public RuleCall getModelParserRuleCall_0() { return cModelParserRuleCall_0; }

		//Package_Impl
		public RuleCall getPackage_ImplParserRuleCall_1() { return cPackage_ImplParserRuleCall_1; }

		//Class_Impl
		public RuleCall getClass_ImplParserRuleCall_2() { return cClass_ImplParserRuleCall_2; }

		//Activity
		public RuleCall getActivityParserRuleCall_3() { return cActivityParserRuleCall_3; }
	}

	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cModelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPackagedElementAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPackagedElementPackageableElementParserRuleCall_4_0_0 = (RuleCall)cPackagedElementAssignment_4_0.eContents().get(0);
		private final Assignment cPackagedElementAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPackagedElementPackageableElementParserRuleCall_4_1_0 = (RuleCall)cPackagedElementAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Model returns uml::Model:
		//	{uml::Model} name=String0 "{" "\tmodel" (packagedElement+=PackageableElement packagedElement+=PackageableElement*)?
		//	"}";
		public ParserRule getRule() { return rule; }

		//{uml::Model} name=String0 "{" "\tmodel" (packagedElement+=PackageableElement packagedElement+=PackageableElement*)? "}"
		public Group getGroup() { return cGroup; }

		//{uml::Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//name=String0
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_0() { return cNameString0ParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"\tmodel"
		public Keyword getModelKeyword_3() { return cModelKeyword_3; }

		//(packagedElement+=PackageableElement packagedElement+=PackageableElement*)?
		public Group getGroup_4() { return cGroup_4; }

		//packagedElement+=PackageableElement
		public Assignment getPackagedElementAssignment_4_0() { return cPackagedElementAssignment_4_0; }

		//PackageableElement
		public RuleCall getPackagedElementPackageableElementParserRuleCall_4_0_0() { return cPackagedElementPackageableElementParserRuleCall_4_0_0; }

		//packagedElement+=PackageableElement*
		public Assignment getPackagedElementAssignment_4_1() { return cPackagedElementAssignment_4_1; }

		//PackageableElement
		public RuleCall getPackagedElementPackageableElementParserRuleCall_4_1_0() { return cPackagedElementPackageableElementParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final RuleCall cClass_ImplParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Type returns uml::Type:
		//	Class_Impl;
		public ParserRule getRule() { return rule; }

		//Class_Impl
		public RuleCall getClass_ImplParserRuleCall() { return cClass_ImplParserRuleCall; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final RuleCall cPackage_ImplParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Package returns uml::Package:
		//	Package_Impl;
		public ParserRule getRule() { return rule; }

		//Package_Impl
		public RuleCall getPackage_ImplParserRuleCall() { return cPackage_ImplParserRuleCall; }
	}

	public class ParameterableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterableElement");
		private final RuleCall cOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ParameterableElement returns uml::ParameterableElement:
		//	Operation;
		public ParserRule getRule() { return rule; }

		//Operation
		public RuleCall getOperationParserRuleCall() { return cOperationParserRuleCall; }
	}

	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Classifier");
		private final RuleCall cClass_ImplParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Classifier returns uml::Classifier:
		//	Class_Impl;
		public ParserRule getRule() { return rule; }

		//Class_Impl
		public RuleCall getClass_ImplParserRuleCall() { return cClass_ImplParserRuleCall; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final RuleCall cProperty_ImplParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Property returns uml::Property:
		//	Property_Impl;
		public ParserRule getRule() { return rule; }

		//Property_Impl
		public RuleCall getProperty_ImplParserRuleCall() { return cProperty_ImplParserRuleCall; }
	}

	public class StructuralFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructuralFeature");
		private final RuleCall cProperty_ImplParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StructuralFeature returns uml::StructuralFeature:
		//	Property_Impl;
		public ParserRule getRule() { return rule; }

		//Property_Impl
		public RuleCall getProperty_ImplParserRuleCall() { return cProperty_ImplParserRuleCall; }
	}

	public class Package_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameString0ParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPackagedElementAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPackagedElementPackageableElementParserRuleCall_4_0_0 = (RuleCall)cPackagedElementAssignment_4_0.eContents().get(0);
		private final Assignment cPackagedElementAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPackagedElementPackageableElementParserRuleCall_4_1_0 = (RuleCall)cPackagedElementAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Package_Impl returns uml::Package:
		//	{uml::Package} "package" name=String0 "{" (packagedElement+=PackageableElement packagedElement+=PackageableElement*)?
		//	"}";
		public ParserRule getRule() { return rule; }

		//{uml::Package} "package" name=String0 "{" (packagedElement+=PackageableElement packagedElement+=PackageableElement*)?
		//"}"
		public Group getGroup() { return cGroup; }

		//{uml::Package}
		public Action getPackageAction_0() { return cPackageAction_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//name=String0
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//String0
		public RuleCall getNameString0ParserRuleCall_2_0() { return cNameString0ParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(packagedElement+=PackageableElement packagedElement+=PackageableElement*)?
		public Group getGroup_4() { return cGroup_4; }

		//packagedElement+=PackageableElement
		public Assignment getPackagedElementAssignment_4_0() { return cPackagedElementAssignment_4_0; }

		//PackageableElement
		public RuleCall getPackagedElementPackageableElementParserRuleCall_4_0_0() { return cPackagedElementPackageableElementParserRuleCall_4_0_0; }

		//packagedElement+=PackageableElement*
		public Assignment getPackagedElementAssignment_4_1() { return cPackagedElementAssignment_4_1; }

		//PackageableElement
		public RuleCall getPackagedElementPackageableElementParserRuleCall_4_1_0() { return cPackagedElementPackageableElementParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class Property_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameString0ParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_3_1_0 = (CrossReference)cTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_3_1_0_1 = (RuleCall)cTypeTypeCrossReference_3_1_0.eContents().get(1);
		
		//Property_Impl returns uml::Property:
		//	{uml::Property} // (visibility=VisibilityKind)? ('static' isStatic=Boolean)?
		//	"property" name=String0 (":" type=[uml::Type|EString])?;
		public ParserRule getRule() { return rule; }

		//{uml::Property} // (visibility=VisibilityKind)? ('static' isStatic=Boolean)?
		//"property" name=String0 (":" type=[uml::Type|EString])?
		public Group getGroup() { return cGroup; }

		//{uml::Property}
		public Action getPropertyAction_0() { return cPropertyAction_0; }

		//// (visibility=VisibilityKind)? ('static' isStatic=Boolean)?
		//"property"
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }

		//name=String0
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//String0
		public RuleCall getNameString0ParserRuleCall_2_0() { return cNameString0ParserRuleCall_2_0; }

		//(":" type=[uml::Type|EString])?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//type=[uml::Type|EString]
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//[uml::Type|EString]
		public CrossReference getTypeTypeCrossReference_3_1_0() { return cTypeTypeCrossReference_3_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_3_1_0_1() { return cTypeTypeEStringParserRuleCall_3_1_0_1; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOperationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameString0ParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Operation returns uml::Operation:
		//	{uml::Operation} // (visibility=VisibilityKind)? (concurrency=CallConcurrencyKind)?
		//	"operation" name=String0 "(" ")";
		public ParserRule getRule() { return rule; }

		//{uml::Operation} // (visibility=VisibilityKind)? (concurrency=CallConcurrencyKind)?
		//"operation" name=String0 "(" ")"
		public Group getGroup() { return cGroup; }

		//{uml::Operation}
		public Action getOperationAction_0() { return cOperationAction_0; }

		//// (visibility=VisibilityKind)? (concurrency=CallConcurrencyKind)?
		//"operation"
		public Keyword getOperationKeyword_1() { return cOperationKeyword_1; }

		//name=String0
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//String0
		public RuleCall getNameString0ParserRuleCall_2_0() { return cNameString0ParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActivityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameString0ParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cSpecificationForKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSpecificationAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cSpecificationOperationCrossReference_3_2_0 = (CrossReference)cSpecificationAssignment_3_2.eContents().get(0);
		private final RuleCall cSpecificationOperationIDTerminalRuleCall_3_2_0_1 = (RuleCall)cSpecificationOperationCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cOwnedAttributeAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cOwnedAttributePropertyParserRuleCall_7_0_0 = (RuleCall)cOwnedAttributeAssignment_7_0.eContents().get(0);
		private final Assignment cVariableAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_7_1_0 = (RuleCall)cVariableAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Activity returns uml::Activity:
		//	{uml::Activity} "activity" // (visibility=VisibilityKind)?
		//	name=String0 ("[" "specification for" specification=[uml::Operation] "]")? "(" ")" "{" (ownedAttribute+=Property |
		//	variable+=Variable)* "}";
		public ParserRule getRule() { return rule; }

		//{uml::Activity} "activity" // (visibility=VisibilityKind)?
		//name=String0 ("[" "specification for" specification=[uml::Operation] "]")? "(" ")" "{" (ownedAttribute+=Property |
		//variable+=Variable)* "}"
		public Group getGroup() { return cGroup; }

		//{uml::Activity}
		public Action getActivityAction_0() { return cActivityAction_0; }

		//"activity"
		public Keyword getActivityKeyword_1() { return cActivityKeyword_1; }

		//// (visibility=VisibilityKind)?
		//name=String0
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//String0
		public RuleCall getNameString0ParserRuleCall_2_0() { return cNameString0ParserRuleCall_2_0; }

		//("[" "specification for" specification=[uml::Operation] "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//"specification for"
		public Keyword getSpecificationForKeyword_3_1() { return cSpecificationForKeyword_3_1; }

		//specification=[uml::Operation]
		public Assignment getSpecificationAssignment_3_2() { return cSpecificationAssignment_3_2; }

		//[uml::Operation]
		public CrossReference getSpecificationOperationCrossReference_3_2_0() { return cSpecificationOperationCrossReference_3_2_0; }

		//ID
		public RuleCall getSpecificationOperationIDTerminalRuleCall_3_2_0_1() { return cSpecificationOperationIDTerminalRuleCall_3_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//(ownedAttribute+=Property | variable+=Variable)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//ownedAttribute+=Property
		public Assignment getOwnedAttributeAssignment_7_0() { return cOwnedAttributeAssignment_7_0; }

		//Property
		public RuleCall getOwnedAttributePropertyParserRuleCall_7_0_0() { return cOwnedAttributePropertyParserRuleCall_7_0_0; }

		//variable+=Variable
		public Assignment getVariableAssignment_7_1() { return cVariableAssignment_7_1; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_7_1_0() { return cVariableVariableParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameString0ParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_3_1_0 = (CrossReference)cTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_3_1_0_1 = (RuleCall)cTypeTypeCrossReference_3_1_0.eContents().get(1);
		
		//Variable returns uml::Variable:
		//	{uml::Variable} "variable" name=String0 (":" type=[uml::Type|EString])?;
		public ParserRule getRule() { return rule; }

		//{uml::Variable} "variable" name=String0 (":" type=[uml::Type|EString])?
		public Group getGroup() { return cGroup; }

		//{uml::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//"variable"
		public Keyword getVariableKeyword_1() { return cVariableKeyword_1; }

		//name=String0
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//String0
		public RuleCall getNameString0ParserRuleCall_2_0() { return cNameString0ParserRuleCall_2_0; }

		//(":" type=[uml::Type|EString])?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//type=[uml::Type|EString]
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//[uml::Type|EString]
		public CrossReference getTypeTypeCrossReference_3_1_0() { return cTypeTypeCrossReference_3_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_3_1_0_1() { return cTypeTypeEStringParserRuleCall_3_1_0_1; }
	}

	public class StructuredActivityNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructuredActivityNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructuredActivityNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StructuredActivityNode returns uml::StructuredActivityNode:
		//	{uml::StructuredActivityNode} "node";
		public ParserRule getRule() { return rule; }

		//{uml::StructuredActivityNode} "node"
		public Group getGroup() { return cGroup; }

		//{uml::StructuredActivityNode}
		public Action getStructuredActivityNodeAction_0() { return cStructuredActivityNodeAction_0; }

		//"node"
		public Keyword getNodeKeyword_1() { return cNodeKeyword_1; }
	}

	public class Class_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameString0ParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOwnedAttributeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOwnedAttributeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cOwnedAttributePropertyParserRuleCall_4_2_0 = (RuleCall)cOwnedAttributeAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cSemicolonKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cOwnedAttributeAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cOwnedAttributePropertyParserRuleCall_4_3_1_0 = (RuleCall)cOwnedAttributeAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cNestedClassifierKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cNestedClassifierAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cNestedClassifierClassifierParserRuleCall_5_2_0 = (RuleCall)cNestedClassifierAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cNestedClassifierAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cNestedClassifierClassifierParserRuleCall_5_3_1_0 = (RuleCall)cNestedClassifierAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOwnedOperationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOwnedOperationAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOwnedOperationOperationParserRuleCall_6_2_0 = (RuleCall)cOwnedOperationAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cSemicolonKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cOwnedOperationAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cOwnedOperationOperationParserRuleCall_6_3_1_0 = (RuleCall)cOwnedOperationAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class_Impl returns uml::Class:
		//	{uml::Class} // (visibility=VisibilityKind)?
		//	"class" //('active' isActive=Boolean)? ('abstract' isAbstract=Boolean)?
		//	name=String0 "{" ("ownedAttribute" "{" ownedAttribute+=Property (";" ownedAttribute+=Property)* "}")?
		//	("nestedClassifier" "{" nestedClassifier+=Classifier ("," nestedClassifier+=Classifier)* "}")? ("ownedOperation" "{"
		//	ownedOperation+=Operation (";" ownedOperation+=Operation)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{uml::Class} // (visibility=VisibilityKind)?
		//"class" //('active' isActive=Boolean)? ('abstract' isAbstract=Boolean)?
		//name=String0 "{" ("ownedAttribute" "{" ownedAttribute+=Property (";" ownedAttribute+=Property)* "}")?
		//("nestedClassifier" "{" nestedClassifier+=Classifier ("," nestedClassifier+=Classifier)* "}")? ("ownedOperation" "{"
		//ownedOperation+=Operation (";" ownedOperation+=Operation)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{uml::Class}
		public Action getClassAction_0() { return cClassAction_0; }

		//// (visibility=VisibilityKind)?
		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		////('active' isActive=Boolean)? ('abstract' isAbstract=Boolean)?
		//name=String0
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//String0
		public RuleCall getNameString0ParserRuleCall_2_0() { return cNameString0ParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("ownedAttribute" "{" ownedAttribute+=Property (";" ownedAttribute+=Property)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"ownedAttribute"
		public Keyword getOwnedAttributeKeyword_4_0() { return cOwnedAttributeKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//ownedAttribute+=Property
		public Assignment getOwnedAttributeAssignment_4_2() { return cOwnedAttributeAssignment_4_2; }

		//Property
		public RuleCall getOwnedAttributePropertyParserRuleCall_4_2_0() { return cOwnedAttributePropertyParserRuleCall_4_2_0; }

		//(";" ownedAttribute+=Property)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//";"
		public Keyword getSemicolonKeyword_4_3_0() { return cSemicolonKeyword_4_3_0; }

		//ownedAttribute+=Property
		public Assignment getOwnedAttributeAssignment_4_3_1() { return cOwnedAttributeAssignment_4_3_1; }

		//Property
		public RuleCall getOwnedAttributePropertyParserRuleCall_4_3_1_0() { return cOwnedAttributePropertyParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//("nestedClassifier" "{" nestedClassifier+=Classifier ("," nestedClassifier+=Classifier)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"nestedClassifier"
		public Keyword getNestedClassifierKeyword_5_0() { return cNestedClassifierKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//nestedClassifier+=Classifier
		public Assignment getNestedClassifierAssignment_5_2() { return cNestedClassifierAssignment_5_2; }

		//Classifier
		public RuleCall getNestedClassifierClassifierParserRuleCall_5_2_0() { return cNestedClassifierClassifierParserRuleCall_5_2_0; }

		//("," nestedClassifier+=Classifier)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//nestedClassifier+=Classifier
		public Assignment getNestedClassifierAssignment_5_3_1() { return cNestedClassifierAssignment_5_3_1; }

		//Classifier
		public RuleCall getNestedClassifierClassifierParserRuleCall_5_3_1_0() { return cNestedClassifierClassifierParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//("ownedOperation" "{" ownedOperation+=Operation (";" ownedOperation+=Operation)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"ownedOperation"
		public Keyword getOwnedOperationKeyword_6_0() { return cOwnedOperationKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//ownedOperation+=Operation
		public Assignment getOwnedOperationAssignment_6_2() { return cOwnedOperationAssignment_6_2; }

		//Operation
		public RuleCall getOwnedOperationOperationParserRuleCall_6_2_0() { return cOwnedOperationOperationParserRuleCall_6_2_0; }

		//(";" ownedOperation+=Operation)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//";"
		public Keyword getSemicolonKeyword_6_3_0() { return cSemicolonKeyword_6_3_0; }

		//ownedOperation+=Operation
		public Assignment getOwnedOperationAssignment_6_3_1() { return cOwnedOperationAssignment_6_3_1; }

		//Operation
		public RuleCall getOwnedOperationOperationParserRuleCall_6_3_1_0() { return cOwnedOperationOperationParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Keyword cIntegerKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Integer returns uml::Integer:
		//	"Integer";
		public ParserRule getRule() { return rule; }

		//"Integer"
		public Keyword getIntegerKeyword() { return cIntegerKeyword; }
	}

	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "String0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / String0 returns uml::String:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Keyword cBooleanKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Boolean returns uml::Boolean:
		//	"Boolean";
		public ParserRule getRule() { return rule; }

		//"Boolean"
		public Keyword getBooleanKeyword() { return cBooleanKeyword; }
	}

	public class UnlimitedNaturalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnlimitedNatural");
		private final Keyword cUnlimitedNaturalKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / UnlimitedNatural returns uml::UnlimitedNatural:
		//	"UnlimitedNatural";
		public ParserRule getRule() { return rule; }

		//"UnlimitedNatural"
		public Keyword getUnlimitedNaturalKeyword() { return cUnlimitedNaturalKeyword; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ValueSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralNullParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralUnlimitedNaturalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ValueSpecification returns uml::ValueSpecification:
		//	LiteralInteger | LiteralString | LiteralBoolean | LiteralNull | LiteralUnlimitedNatural;
		public ParserRule getRule() { return rule; }

		//LiteralInteger | LiteralString | LiteralBoolean | LiteralNull | LiteralUnlimitedNatural
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralInteger
		public RuleCall getLiteralIntegerParserRuleCall_0() { return cLiteralIntegerParserRuleCall_0; }

		//LiteralString
		public RuleCall getLiteralStringParserRuleCall_1() { return cLiteralStringParserRuleCall_1; }

		//LiteralBoolean
		public RuleCall getLiteralBooleanParserRuleCall_2() { return cLiteralBooleanParserRuleCall_2; }

		//LiteralNull
		public RuleCall getLiteralNullParserRuleCall_3() { return cLiteralNullParserRuleCall_3; }

		//LiteralUnlimitedNatural
		public RuleCall getLiteralUnlimitedNaturalParserRuleCall_4() { return cLiteralUnlimitedNaturalParserRuleCall_4; }
	}

	public class LiteralIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLiteralIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueIntegerParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LiteralInteger returns uml::LiteralInteger:
		//	{uml::LiteralInteger} "LiteralInteger" "{" ("name" name=String0)? "value" value=Integer "}";
		public ParserRule getRule() { return rule; }

		//{uml::LiteralInteger} "LiteralInteger" "{" ("name" name=String0)? "value" value=Integer "}"
		public Group getGroup() { return cGroup; }

		//{uml::LiteralInteger}
		public Action getLiteralIntegerAction_0() { return cLiteralIntegerAction_0; }

		//"LiteralInteger"
		public Keyword getLiteralIntegerKeyword_1() { return cLiteralIntegerKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("name" name=String0)?
		public Group getGroup_3() { return cGroup_3; }

		//"name"
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }

		//name=String0
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_3_1_0() { return cNameString0ParserRuleCall_3_1_0; }

		//"value"
		public Keyword getValueKeyword_4() { return cValueKeyword_4; }

		//value=Integer
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_5_0() { return cValueIntegerParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LiteralStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLiteralStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueString0ParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LiteralString returns uml::LiteralString:
		//	{uml::LiteralString} "LiteralString" "{" ("name" name=String0)? ("value" value=String0)? "}";
		public ParserRule getRule() { return rule; }

		//{uml::LiteralString} "LiteralString" "{" ("name" name=String0)? ("value" value=String0)? "}"
		public Group getGroup() { return cGroup; }

		//{uml::LiteralString}
		public Action getLiteralStringAction_0() { return cLiteralStringAction_0; }

		//"LiteralString"
		public Keyword getLiteralStringKeyword_1() { return cLiteralStringKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("name" name=String0)?
		public Group getGroup_3() { return cGroup_3; }

		//"name"
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }

		//name=String0
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_3_1_0() { return cNameString0ParserRuleCall_3_1_0; }

		//("value" value=String0)?
		public Group getGroup_4() { return cGroup_4; }

		//"value"
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }

		//value=String0
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//String0
		public RuleCall getValueString0ParserRuleCall_4_1_0() { return cValueString0ParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class LiteralBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLiteralBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueBooleanParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LiteralBoolean returns uml::LiteralBoolean:
		//	{uml::LiteralBoolean} "LiteralBoolean" "{" ("name" name=String0)? "value" value=Boolean "}";
		public ParserRule getRule() { return rule; }

		//{uml::LiteralBoolean} "LiteralBoolean" "{" ("name" name=String0)? "value" value=Boolean "}"
		public Group getGroup() { return cGroup; }

		//{uml::LiteralBoolean}
		public Action getLiteralBooleanAction_0() { return cLiteralBooleanAction_0; }

		//"LiteralBoolean"
		public Keyword getLiteralBooleanKeyword_1() { return cLiteralBooleanKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("name" name=String0)?
		public Group getGroup_3() { return cGroup_3; }

		//"name"
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }

		//name=String0
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_3_1_0() { return cNameString0ParserRuleCall_3_1_0; }

		//"value"
		public Keyword getValueKeyword_4() { return cValueKeyword_4; }

		//value=Boolean
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//Boolean
		public RuleCall getValueBooleanParserRuleCall_5_0() { return cValueBooleanParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LiteralUnlimitedNaturalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralUnlimitedNatural");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralUnlimitedNaturalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLiteralUnlimitedNaturalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueUnlimitedNaturalParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LiteralUnlimitedNatural returns uml::LiteralUnlimitedNatural:
		//	{uml::LiteralUnlimitedNatural} "LiteralUnlimitedNatural" "{" ("name" name=String0)? "value" value=UnlimitedNatural
		//	"}";
		public ParserRule getRule() { return rule; }

		//{uml::LiteralUnlimitedNatural} "LiteralUnlimitedNatural" "{" ("name" name=String0)? "value" value=UnlimitedNatural "}"
		public Group getGroup() { return cGroup; }

		//{uml::LiteralUnlimitedNatural}
		public Action getLiteralUnlimitedNaturalAction_0() { return cLiteralUnlimitedNaturalAction_0; }

		//"LiteralUnlimitedNatural"
		public Keyword getLiteralUnlimitedNaturalKeyword_1() { return cLiteralUnlimitedNaturalKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("name" name=String0)?
		public Group getGroup_3() { return cGroup_3; }

		//"name"
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }

		//name=String0
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_3_1_0() { return cNameString0ParserRuleCall_3_1_0; }

		//"value"
		public Keyword getValueKeyword_4() { return cValueKeyword_4; }

		//value=UnlimitedNatural
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//UnlimitedNatural
		public RuleCall getValueUnlimitedNaturalParserRuleCall_5_0() { return cValueUnlimitedNaturalParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LiteralNullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralNull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralNullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLiteralNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LiteralNull returns uml::LiteralNull:
		//	{uml::LiteralNull} "LiteralNull" "{" ("name" name=String0)? "}";
		public ParserRule getRule() { return rule; }

		//{uml::LiteralNull} "LiteralNull" "{" ("name" name=String0)? "}"
		public Group getGroup() { return cGroup; }

		//{uml::LiteralNull}
		public Action getLiteralNullAction_0() { return cLiteralNullAction_0; }

		//"LiteralNull"
		public Keyword getLiteralNullKeyword_1() { return cLiteralNullKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("name" name=String0)?
		public Group getGroup_3() { return cGroup_3; }

		//"name"
		public Keyword getNameKeyword_3_0() { return cNameKeyword_3_0; }

		//name=String0
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_3_1_0() { return cNameString0ParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	public class VisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VisibilityKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPackagePackageKeyword_3_0 = (Keyword)cPackageEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VisibilityKind returns uml::VisibilityKind:
		//	public | private | protected | package;
		public EnumRule getRule() { return rule; }

		//public | private | protected | package
		public Alternatives getAlternatives() { return cAlternatives; }

		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }

		//"public"
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }

		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }

		//"private"
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }

		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }

		//"protected"
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }

		//package
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_3() { return cPackageEnumLiteralDeclaration_3; }

		//"package"
		public Keyword getPackagePackageKeyword_3_0() { return cPackagePackageKeyword_3_0; }
	}

	public class ParameterDirectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDirectionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInoutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInoutInoutKeyword_1_0 = (Keyword)cInoutEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOutOutKeyword_2_0 = (Keyword)cOutEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cReturnEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cReturnReturnKeyword_3_0 = (Keyword)cReturnEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ParameterDirectionKind returns uml::ParameterDirectionKind:
		//	in | inout | out | return;
		public EnumRule getRule() { return rule; }

		//in | inout | out | return
		public Alternatives getAlternatives() { return cAlternatives; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }

		//inout
		public EnumLiteralDeclaration getInoutEnumLiteralDeclaration_1() { return cInoutEnumLiteralDeclaration_1; }

		//"inout"
		public Keyword getInoutInoutKeyword_1_0() { return cInoutInoutKeyword_1_0; }

		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_2() { return cOutEnumLiteralDeclaration_2; }

		//"out"
		public Keyword getOutOutKeyword_2_0() { return cOutOutKeyword_2_0; }

		//return
		public EnumLiteralDeclaration getReturnEnumLiteralDeclaration_3() { return cReturnEnumLiteralDeclaration_3; }

		//"return"
		public Keyword getReturnReturnKeyword_3_0() { return cReturnReturnKeyword_3_0; }
	}

	public class AggregationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AggregationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSharedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSharedSharedKeyword_1_0 = (Keyword)cSharedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCompositeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCompositeCompositeKeyword_2_0 = (Keyword)cCompositeEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AggregationKind returns uml::AggregationKind:
		//	none | shared | composite;
		public EnumRule getRule() { return rule; }

		//none | shared | composite
		public Alternatives getAlternatives() { return cAlternatives; }

		//none
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"none"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//shared
		public EnumLiteralDeclaration getSharedEnumLiteralDeclaration_1() { return cSharedEnumLiteralDeclaration_1; }

		//"shared"
		public Keyword getSharedSharedKeyword_1_0() { return cSharedSharedKeyword_1_0; }

		//composite
		public EnumLiteralDeclaration getCompositeEnumLiteralDeclaration_2() { return cCompositeEnumLiteralDeclaration_2; }

		//"composite"
		public Keyword getCompositeCompositeKeyword_2_0() { return cCompositeCompositeKeyword_2_0; }
	}

	public class CallConcurrencyKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CallConcurrencyKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSequentialEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSequentialSequentialKeyword_0_0 = (Keyword)cSequentialEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGuardedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGuardedGuardedKeyword_1_0 = (Keyword)cGuardedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cConcurrentEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cConcurrentConcurrentKeyword_2_0 = (Keyword)cConcurrentEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum CallConcurrencyKind returns uml::CallConcurrencyKind:
		//	sequential | guarded | concurrent;
		public EnumRule getRule() { return rule; }

		//sequential | guarded | concurrent
		public Alternatives getAlternatives() { return cAlternatives; }

		//sequential
		public EnumLiteralDeclaration getSequentialEnumLiteralDeclaration_0() { return cSequentialEnumLiteralDeclaration_0; }

		//"sequential"
		public Keyword getSequentialSequentialKeyword_0_0() { return cSequentialSequentialKeyword_0_0; }

		//guarded
		public EnumLiteralDeclaration getGuardedEnumLiteralDeclaration_1() { return cGuardedEnumLiteralDeclaration_1; }

		//"guarded"
		public Keyword getGuardedGuardedKeyword_1_0() { return cGuardedGuardedKeyword_1_0; }

		//concurrent
		public EnumLiteralDeclaration getConcurrentEnumLiteralDeclaration_2() { return cConcurrentEnumLiteralDeclaration_2; }

		//"concurrent"
		public Keyword getConcurrentConcurrentKeyword_2_0() { return cConcurrentConcurrentKeyword_2_0; }
	}
	
	private PackageableElementElements pPackageableElement;
	private ModelElements pModel;
	private TypeElements pType;
	private PackageElements pPackage;
	private ParameterableElementElements pParameterableElement;
	private ClassifierElements pClassifier;
	private PropertyElements pProperty;
	private StructuralFeatureElements pStructuralFeature;
	private Package_ImplElements pPackage_Impl;
	private Property_ImplElements pProperty_Impl;
	private OperationElements pOperation;
	private ActivityElements pActivity;
	private VariableElements pVariable;
	private StructuredActivityNodeElements pStructuredActivityNode;
	private Class_ImplElements pClass_Impl;
	private IntegerElements pInteger;
	private String0Elements pString0;
	private BooleanElements pBoolean;
	private UnlimitedNaturalElements pUnlimitedNatural;
	private EStringElements pEString;
	private ValueSpecificationElements pValueSpecification;
	private LiteralIntegerElements pLiteralInteger;
	private LiteralStringElements pLiteralString;
	private LiteralBooleanElements pLiteralBoolean;
	private LiteralUnlimitedNaturalElements pLiteralUnlimitedNatural;
	private LiteralNullElements pLiteralNull;
	private VisibilityKindElements unknownRuleVisibilityKind;
	private ParameterDirectionKindElements unknownRuleParameterDirectionKind;
	private AggregationKindElements unknownRuleAggregationKind;
	private CallConcurrencyKindElements unknownRuleCallConcurrencyKind;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EAlfGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PackageableElement returns uml::PackageableElement:
	//	Model | Package_Impl | Class_Impl | Activity;
	public PackageableElementElements getPackageableElementAccess() {
		return (pPackageableElement != null) ? pPackageableElement : (pPackageableElement = new PackageableElementElements());
	}
	
	public ParserRule getPackageableElementRule() {
		return getPackageableElementAccess().getRule();
	}

	//Model returns uml::Model:
	//	{uml::Model} name=String0 "{" "\tmodel" (packagedElement+=PackageableElement packagedElement+=PackageableElement*)?
	//	"}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Type returns uml::Type:
	//	Class_Impl;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Package returns uml::Package:
	//	Package_Impl;
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//ParameterableElement returns uml::ParameterableElement:
	//	Operation;
	public ParameterableElementElements getParameterableElementAccess() {
		return (pParameterableElement != null) ? pParameterableElement : (pParameterableElement = new ParameterableElementElements());
	}
	
	public ParserRule getParameterableElementRule() {
		return getParameterableElementAccess().getRule();
	}

	//Classifier returns uml::Classifier:
	//	Class_Impl;
	public ClassifierElements getClassifierAccess() {
		return (pClassifier != null) ? pClassifier : (pClassifier = new ClassifierElements());
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}

	//Property returns uml::Property:
	//	Property_Impl;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//StructuralFeature returns uml::StructuralFeature:
	//	Property_Impl;
	public StructuralFeatureElements getStructuralFeatureAccess() {
		return (pStructuralFeature != null) ? pStructuralFeature : (pStructuralFeature = new StructuralFeatureElements());
	}
	
	public ParserRule getStructuralFeatureRule() {
		return getStructuralFeatureAccess().getRule();
	}

	//Package_Impl returns uml::Package:
	//	{uml::Package} "package" name=String0 "{" (packagedElement+=PackageableElement packagedElement+=PackageableElement*)?
	//	"}";
	public Package_ImplElements getPackage_ImplAccess() {
		return (pPackage_Impl != null) ? pPackage_Impl : (pPackage_Impl = new Package_ImplElements());
	}
	
	public ParserRule getPackage_ImplRule() {
		return getPackage_ImplAccess().getRule();
	}

	//Property_Impl returns uml::Property:
	//	{uml::Property} // (visibility=VisibilityKind)? ('static' isStatic=Boolean)?
	//	"property" name=String0 (":" type=[uml::Type|EString])?;
	public Property_ImplElements getProperty_ImplAccess() {
		return (pProperty_Impl != null) ? pProperty_Impl : (pProperty_Impl = new Property_ImplElements());
	}
	
	public ParserRule getProperty_ImplRule() {
		return getProperty_ImplAccess().getRule();
	}

	//Operation returns uml::Operation:
	//	{uml::Operation} // (visibility=VisibilityKind)? (concurrency=CallConcurrencyKind)?
	//	"operation" name=String0 "(" ")";
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Activity returns uml::Activity:
	//	{uml::Activity} "activity" // (visibility=VisibilityKind)?
	//	name=String0 ("[" "specification for" specification=[uml::Operation] "]")? "(" ")" "{" (ownedAttribute+=Property |
	//	variable+=Variable)* "}";
	public ActivityElements getActivityAccess() {
		return (pActivity != null) ? pActivity : (pActivity = new ActivityElements());
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}

	//Variable returns uml::Variable:
	//	{uml::Variable} "variable" name=String0 (":" type=[uml::Type|EString])?;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//StructuredActivityNode returns uml::StructuredActivityNode:
	//	{uml::StructuredActivityNode} "node";
	public StructuredActivityNodeElements getStructuredActivityNodeAccess() {
		return (pStructuredActivityNode != null) ? pStructuredActivityNode : (pStructuredActivityNode = new StructuredActivityNodeElements());
	}
	
	public ParserRule getStructuredActivityNodeRule() {
		return getStructuredActivityNodeAccess().getRule();
	}

	//Class_Impl returns uml::Class:
	//	{uml::Class} // (visibility=VisibilityKind)?
	//	"class" //('active' isActive=Boolean)? ('abstract' isAbstract=Boolean)?
	//	name=String0 "{" ("ownedAttribute" "{" ownedAttribute+=Property (";" ownedAttribute+=Property)* "}")?
	//	("nestedClassifier" "{" nestedClassifier+=Classifier ("," nestedClassifier+=Classifier)* "}")? ("ownedOperation" "{"
	//	ownedOperation+=Operation (";" ownedOperation+=Operation)* "}")? "}";
	public Class_ImplElements getClass_ImplAccess() {
		return (pClass_Impl != null) ? pClass_Impl : (pClass_Impl = new Class_ImplElements());
	}
	
	public ParserRule getClass_ImplRule() {
		return getClass_ImplAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Integer returns uml::Integer:
	//	"Integer";
	public IntegerElements getIntegerAccess() {
		return (pInteger != null) ? pInteger : (pInteger = new IntegerElements());
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / String0 returns uml::String:
	//	STRING | ID;
	public String0Elements getString0Access() {
		return (pString0 != null) ? pString0 : (pString0 = new String0Elements());
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Boolean returns uml::Boolean:
	//	"Boolean";
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / UnlimitedNatural returns uml::UnlimitedNatural:
	//	"UnlimitedNatural";
	public UnlimitedNaturalElements getUnlimitedNaturalAccess() {
		return (pUnlimitedNatural != null) ? pUnlimitedNatural : (pUnlimitedNatural = new UnlimitedNaturalElements());
	}
	
	public ParserRule getUnlimitedNaturalRule() {
		return getUnlimitedNaturalAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//ValueSpecification returns uml::ValueSpecification:
	//	LiteralInteger | LiteralString | LiteralBoolean | LiteralNull | LiteralUnlimitedNatural;
	public ValueSpecificationElements getValueSpecificationAccess() {
		return (pValueSpecification != null) ? pValueSpecification : (pValueSpecification = new ValueSpecificationElements());
	}
	
	public ParserRule getValueSpecificationRule() {
		return getValueSpecificationAccess().getRule();
	}

	//LiteralInteger returns uml::LiteralInteger:
	//	{uml::LiteralInteger} "LiteralInteger" "{" ("name" name=String0)? "value" value=Integer "}";
	public LiteralIntegerElements getLiteralIntegerAccess() {
		return (pLiteralInteger != null) ? pLiteralInteger : (pLiteralInteger = new LiteralIntegerElements());
	}
	
	public ParserRule getLiteralIntegerRule() {
		return getLiteralIntegerAccess().getRule();
	}

	//LiteralString returns uml::LiteralString:
	//	{uml::LiteralString} "LiteralString" "{" ("name" name=String0)? ("value" value=String0)? "}";
	public LiteralStringElements getLiteralStringAccess() {
		return (pLiteralString != null) ? pLiteralString : (pLiteralString = new LiteralStringElements());
	}
	
	public ParserRule getLiteralStringRule() {
		return getLiteralStringAccess().getRule();
	}

	//LiteralBoolean returns uml::LiteralBoolean:
	//	{uml::LiteralBoolean} "LiteralBoolean" "{" ("name" name=String0)? "value" value=Boolean "}";
	public LiteralBooleanElements getLiteralBooleanAccess() {
		return (pLiteralBoolean != null) ? pLiteralBoolean : (pLiteralBoolean = new LiteralBooleanElements());
	}
	
	public ParserRule getLiteralBooleanRule() {
		return getLiteralBooleanAccess().getRule();
	}

	//LiteralUnlimitedNatural returns uml::LiteralUnlimitedNatural:
	//	{uml::LiteralUnlimitedNatural} "LiteralUnlimitedNatural" "{" ("name" name=String0)? "value" value=UnlimitedNatural
	//	"}";
	public LiteralUnlimitedNaturalElements getLiteralUnlimitedNaturalAccess() {
		return (pLiteralUnlimitedNatural != null) ? pLiteralUnlimitedNatural : (pLiteralUnlimitedNatural = new LiteralUnlimitedNaturalElements());
	}
	
	public ParserRule getLiteralUnlimitedNaturalRule() {
		return getLiteralUnlimitedNaturalAccess().getRule();
	}

	//LiteralNull returns uml::LiteralNull:
	//	{uml::LiteralNull} "LiteralNull" "{" ("name" name=String0)? "}";
	public LiteralNullElements getLiteralNullAccess() {
		return (pLiteralNull != null) ? pLiteralNull : (pLiteralNull = new LiteralNullElements());
	}
	
	public ParserRule getLiteralNullRule() {
		return getLiteralNullAccess().getRule();
	}

	//enum VisibilityKind returns uml::VisibilityKind:
	//	public | private | protected | package;
	public VisibilityKindElements getVisibilityKindAccess() {
		return (unknownRuleVisibilityKind != null) ? unknownRuleVisibilityKind : (unknownRuleVisibilityKind = new VisibilityKindElements());
	}
	
	public EnumRule getVisibilityKindRule() {
		return getVisibilityKindAccess().getRule();
	}

	//enum ParameterDirectionKind returns uml::ParameterDirectionKind:
	//	in | inout | out | return;
	public ParameterDirectionKindElements getParameterDirectionKindAccess() {
		return (unknownRuleParameterDirectionKind != null) ? unknownRuleParameterDirectionKind : (unknownRuleParameterDirectionKind = new ParameterDirectionKindElements());
	}
	
	public EnumRule getParameterDirectionKindRule() {
		return getParameterDirectionKindAccess().getRule();
	}

	//enum AggregationKind returns uml::AggregationKind:
	//	none | shared | composite;
	public AggregationKindElements getAggregationKindAccess() {
		return (unknownRuleAggregationKind != null) ? unknownRuleAggregationKind : (unknownRuleAggregationKind = new AggregationKindElements());
	}
	
	public EnumRule getAggregationKindRule() {
		return getAggregationKindAccess().getRule();
	}

	//enum CallConcurrencyKind returns uml::CallConcurrencyKind:
	//	sequential | guarded | concurrent;
	public CallConcurrencyKindElements getCallConcurrencyKindAccess() {
		return (unknownRuleCallConcurrencyKind != null) ? unknownRuleCallConcurrencyKind : (unknownRuleCallConcurrencyKind = new CallConcurrencyKindElements());
	}
	
	public EnumRule getCallConcurrencyKindRule() {
		return getCallConcurrencyKindAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
