/*
* generated by Xtext
*/
grammar InternalEAlf;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ro.ubbcluj.cs.ealf.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ro.ubbcluj.cs.ealf.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import ro.ubbcluj.cs.ealf.services.EAlfGrammarAccess;

}

@parser::members {

 	private EAlfGrammarAccess grammarAccess;
 	
    public InternalEAlfParser(TokenStream input, IAstFactory factory, EAlfGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("ro/ubbcluj/cs/ealf/parser/antlr/internal/InternalEAlf.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected EAlfGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'packagedElement' 
    {
        createLeafNode(grammarAccess.getModelAccess().getPackagedElementKeyword_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getPackagedElementPackageableElementParserRuleCall_2_0(), currentNode); 
	    }
		lv_packagedElement_2_0=rulePackageableElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packagedElement",
	        		lv_packagedElement_2_0, 
	        		"PackageableElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getModelAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getPackagedElementPackageableElementParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_packagedElement_4_0=rulePackageableElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packagedElement",
	        		lv_packagedElement_4_0, 
	        		"PackageableElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)?
;





// Entry rule entryRulePackageableElement
entryRulePackageableElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageableElementRule(), currentNode); }
	 iv_rulePackageableElement=rulePackageableElement 
	 { $current=$iv_rulePackageableElement.current; } 
	 EOF 
;

// Rule PackageableElement
rulePackageableElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageableElementAccess().getPackage_ImplParserRuleCall_0(), currentNode); 
    }
    this_Package_Impl_0=rulePackage_Impl
    { 
        $current = $this_Package_Impl_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageableElementAccess().getClass_ImplParserRuleCall_1(), currentNode); 
    }
    this_Class_Impl_1=ruleClass_Impl
    { 
        $current = $this_Class_Impl_1.current; 
        currentNode = currentNode.getParent();
    }
)
;











// Entry rule entryRuleClassifier
entryRuleClassifier returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassifierRule(), currentNode); }
	 iv_ruleClassifier=ruleClassifier 
	 { $current=$iv_ruleClassifier.current; } 
	 EOF 
;

// Rule Classifier
ruleClassifier returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierAccess().getClass_ImplParserRuleCall(), currentNode); 
    }
    this_Class_Impl_0=ruleClass_Impl
    { 
        $current = $this_Class_Impl_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyRule(), currentNode); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getProperty_ImplParserRuleCall(), currentNode); 
    }
    this_Property_Impl_0=ruleProperty_Impl
    { 
        $current = $this_Property_Impl_0.current; 
        currentNode = currentNode.getParent();
    }

;







// Entry rule entryRulePackage_Impl
entryRulePackage_Impl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackage_ImplRule(), currentNode); }
	 iv_rulePackage_Impl=rulePackage_Impl 
	 { $current=$iv_rulePackage_Impl.current; } 
	 EOF 
;

// Rule Package_Impl
rulePackage_Impl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPackage_ImplAccess().getPackageAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPackage_ImplAccess().getPackageAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Package' 
    {
        createLeafNode(grammarAccess.getPackage_ImplAccess().getPackageKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getPackage_ImplAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'name' 
    {
        createLeafNode(grammarAccess.getPackage_ImplAccess().getNameKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackage_ImplAccess().getNameString0ParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleString0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackage_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"String0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'visibility' 
    {
        createLeafNode(grammarAccess.getPackage_ImplAccess().getVisibilityKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackage_ImplAccess().getVisibilityVisibilityKindEnumRuleCall_4_1_0(), currentNode); 
	    }
		lv_visibility_6_0=ruleVisibilityKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackage_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"visibility",
	        		lv_visibility_6_0, 
	        		"VisibilityKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'packagedElement' 
    {
        createLeafNode(grammarAccess.getPackage_ImplAccess().getPackagedElementKeyword_5_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getPackage_ImplAccess().getLeftCurlyBracketKeyword_5_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackage_ImplAccess().getPackagedElementPackageableElementParserRuleCall_5_2_0(), currentNode); 
	    }
		lv_packagedElement_9_0=rulePackageableElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackage_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packagedElement",
	        		lv_packagedElement_9_0, 
	        		"PackageableElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getPackage_ImplAccess().getCommaKeyword_5_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackage_ImplAccess().getPackagedElementPackageableElementParserRuleCall_5_3_1_0(), currentNode); 
	    }
		lv_packagedElement_11_0=rulePackageableElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackage_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packagedElement",
	        		lv_packagedElement_11_0, 
	        		"PackageableElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getPackage_ImplAccess().getRightCurlyBracketKeyword_5_4(), null); 
    }
)?	'}' 
    {
        createLeafNode(grammarAccess.getPackage_ImplAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleProperty_Impl
entryRuleProperty_Impl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProperty_ImplRule(), currentNode); }
	 iv_ruleProperty_Impl=ruleProperty_Impl 
	 { $current=$iv_ruleProperty_Impl.current; } 
	 EOF 
;

// Rule Property_Impl
ruleProperty_Impl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getProperty_ImplAccess().getPropertyAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getProperty_ImplAccess().getPropertyAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Property' 
    {
        createLeafNode(grammarAccess.getProperty_ImplAccess().getPropertyKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getProperty_ImplAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'name' 
    {
        createLeafNode(grammarAccess.getProperty_ImplAccess().getNameKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProperty_ImplAccess().getNameString0ParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleString0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProperty_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"String0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'visibility' 
    {
        createLeafNode(grammarAccess.getProperty_ImplAccess().getVisibilityKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProperty_ImplAccess().getVisibilityVisibilityKindEnumRuleCall_4_1_0(), currentNode); 
	    }
		lv_visibility_6_0=ruleVisibilityKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProperty_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"visibility",
	        		lv_visibility_6_0, 
	        		"VisibilityKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'isStatic' 
    {
        createLeafNode(grammarAccess.getProperty_ImplAccess().getIsStaticKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProperty_ImplAccess().getIsStaticBooleanParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_isStatic_8_0=ruleBoolean		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProperty_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"isStatic",
	        		lv_isStatic_8_0, 
	        		"Boolean", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'type' 
    {
        createLeafNode(grammarAccess.getProperty_ImplAccess().getTypeKeyword_6_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getProperty_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProperty_ImplAccess().getTypeTypeCrossReference_6_1_0(), currentNode); 
	    }
		ruleEString		{ 
	        currentNode = currentNode.getParent();
	    }

)
))?	'}' 
    {
        createLeafNode(grammarAccess.getProperty_ImplAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationRule(), currentNode); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getOperationAccess().getOperationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOperationAccess().getOperationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Operation' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getOperationKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'name' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getNameKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getNameString0ParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleString0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"String0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'visibility' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getVisibilityKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getVisibilityVisibilityKindEnumRuleCall_4_1_0(), currentNode); 
	    }
		lv_visibility_6_0=ruleVisibilityKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"visibility",
	        		lv_visibility_6_0, 
	        		"VisibilityKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'isStatic' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getIsStaticKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getIsStaticBooleanParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_isStatic_8_0=ruleBoolean		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"isStatic",
	        		lv_isStatic_8_0, 
	        		"Boolean", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'isAbstract' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getIsAbstractKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getIsAbstractBooleanParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_isAbstract_10_0=ruleBoolean		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"isAbstract",
	        		lv_isAbstract_10_0, 
	        		"Boolean", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'concurrency' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getConcurrencyKeyword_7_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getConcurrencyCallConcurrencyKindEnumRuleCall_7_1_0(), currentNode); 
	    }
		lv_concurrency_12_0=ruleCallConcurrencyKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"concurrency",
	        		lv_concurrency_12_0, 
	        		"CallConcurrencyKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'}' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getRightCurlyBracketKeyword_8(), null); 
    }
)
;





// Entry rule entryRuleClass_Impl
entryRuleClass_Impl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClass_ImplRule(), currentNode); }
	 iv_ruleClass_Impl=ruleClass_Impl 
	 { $current=$iv_ruleClass_Impl.current; } 
	 EOF 
;

// Rule Class_Impl
ruleClass_Impl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getClass_ImplAccess().getClassAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getClass_ImplAccess().getClassAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Class' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getClassKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'name' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getNameKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_ImplAccess().getNameString0ParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleString0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"String0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'visibility' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getVisibilityKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_ImplAccess().getVisibilityVisibilityKindEnumRuleCall_4_1_0(), currentNode); 
	    }
		lv_visibility_6_0=ruleVisibilityKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"visibility",
	        		lv_visibility_6_0, 
	        		"VisibilityKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'isAbstract' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getIsAbstractKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_ImplAccess().getIsAbstractBooleanParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_isAbstract_8_0=ruleBoolean		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"isAbstract",
	        		lv_isAbstract_8_0, 
	        		"Boolean", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'isActive' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getIsActiveKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_ImplAccess().getIsActiveBooleanParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_isActive_10_0=ruleBoolean		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"isActive",
	        		lv_isActive_10_0, 
	        		"Boolean", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'ownedAttribute' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getOwnedAttributeKeyword_7_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getLeftCurlyBracketKeyword_7_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_ImplAccess().getOwnedAttributePropertyParserRuleCall_7_2_0(), currentNode); 
	    }
		lv_ownedAttribute_13_0=ruleProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_13_0, 
	        		"Property", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getCommaKeyword_7_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_ImplAccess().getOwnedAttributePropertyParserRuleCall_7_3_1_0(), currentNode); 
	    }
		lv_ownedAttribute_15_0=ruleProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedAttribute",
	        		lv_ownedAttribute_15_0, 
	        		"Property", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getRightCurlyBracketKeyword_7_4(), null); 
    }
)?(	'nestedClassifier' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getNestedClassifierKeyword_8_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getLeftCurlyBracketKeyword_8_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_ImplAccess().getNestedClassifierClassifierParserRuleCall_8_2_0(), currentNode); 
	    }
		lv_nestedClassifier_19_0=ruleClassifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"nestedClassifier",
	        		lv_nestedClassifier_19_0, 
	        		"Classifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getCommaKeyword_8_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_ImplAccess().getNestedClassifierClassifierParserRuleCall_8_3_1_0(), currentNode); 
	    }
		lv_nestedClassifier_21_0=ruleClassifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"nestedClassifier",
	        		lv_nestedClassifier_21_0, 
	        		"Classifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getRightCurlyBracketKeyword_8_4(), null); 
    }
)?(	'ownedOperation' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getOwnedOperationKeyword_9_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getLeftCurlyBracketKeyword_9_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_ImplAccess().getOwnedOperationOperationParserRuleCall_9_2_0(), currentNode); 
	    }
		lv_ownedOperation_25_0=ruleOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedOperation",
	        		lv_ownedOperation_25_0, 
	        		"Operation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getCommaKeyword_9_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClass_ImplAccess().getOwnedOperationOperationParserRuleCall_9_3_1_0(), currentNode); 
	    }
		lv_ownedOperation_27_0=ruleOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClass_ImplRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedOperation",
	        		lv_ownedOperation_27_0, 
	        		"Operation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getRightCurlyBracketKeyword_9_4(), null); 
    }
)?	'}' 
    {
        createLeafNode(grammarAccess.getClass_ImplAccess().getRightCurlyBracketKeyword_10(), null); 
    }
)
;





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerRule(), currentNode); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='Integer' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIntegerAccess().getIntegerKeyword(), null); 
    }

    ;





// Entry rule entryRuleString0
entryRuleString0 returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getString0Rule(), currentNode); } 
	 iv_ruleString0=ruleString0 
	 { $current=$iv_ruleString0.current.getText(); }  
	 EOF 
;

// Rule String0
ruleString0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getString0Access().getSTRINGTerminalRuleCall_0(), null); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getString0Access().getIDTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanRule(), currentNode); } 
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current.getText(); }  
	 EOF 
;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='Boolean' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBooleanAccess().getBooleanKeyword(), null); 
    }

    ;





// Entry rule entryRuleUnlimitedNatural
entryRuleUnlimitedNatural returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnlimitedNaturalRule(), currentNode); } 
	 iv_ruleUnlimitedNatural=ruleUnlimitedNatural 
	 { $current=$iv_ruleUnlimitedNatural.current.getText(); }  
	 EOF 
;

// Rule UnlimitedNatural
ruleUnlimitedNatural returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='UnlimitedNatural' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnlimitedNaturalAccess().getUnlimitedNaturalKeyword(), null); 
    }

    ;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEStringRule(), currentNode); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0(), null); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1(), null); 
    }
)
    ;







// Entry rule entryRuleLiteralInteger
entryRuleLiteralInteger returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralIntegerRule(), currentNode); }
	 iv_ruleLiteralInteger=ruleLiteralInteger 
	 { $current=$iv_ruleLiteralInteger.current; } 
	 EOF 
;

// Rule LiteralInteger
ruleLiteralInteger returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralIntegerAccess().getLiteralIntegerAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralIntegerAccess().getLiteralIntegerAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'LiteralInteger' 
    {
        createLeafNode(grammarAccess.getLiteralIntegerAccess().getLiteralIntegerKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getLiteralIntegerAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'name' 
    {
        createLeafNode(grammarAccess.getLiteralIntegerAccess().getNameKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralIntegerAccess().getNameString0ParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleString0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralIntegerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"String0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'value' 
    {
        createLeafNode(grammarAccess.getLiteralIntegerAccess().getValueKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralIntegerAccess().getValueIntegerParserRuleCall_5_0(), currentNode); 
	    }
		lv_value_6_0=ruleInteger		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralIntegerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_6_0, 
	        		"Integer", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getLiteralIntegerAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleLiteralString
entryRuleLiteralString returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralStringRule(), currentNode); }
	 iv_ruleLiteralString=ruleLiteralString 
	 { $current=$iv_ruleLiteralString.current; } 
	 EOF 
;

// Rule LiteralString
ruleLiteralString returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralStringAccess().getLiteralStringAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralStringAccess().getLiteralStringAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'LiteralString' 
    {
        createLeafNode(grammarAccess.getLiteralStringAccess().getLiteralStringKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getLiteralStringAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'name' 
    {
        createLeafNode(grammarAccess.getLiteralStringAccess().getNameKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralStringAccess().getNameString0ParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleString0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"String0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'value' 
    {
        createLeafNode(grammarAccess.getLiteralStringAccess().getValueKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralStringAccess().getValueString0ParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_value_6_0=ruleString0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_6_0, 
	        		"String0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'}' 
    {
        createLeafNode(grammarAccess.getLiteralStringAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleLiteralBoolean
entryRuleLiteralBoolean returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralBooleanRule(), currentNode); }
	 iv_ruleLiteralBoolean=ruleLiteralBoolean 
	 { $current=$iv_ruleLiteralBoolean.current; } 
	 EOF 
;

// Rule LiteralBoolean
ruleLiteralBoolean returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralBooleanAccess().getLiteralBooleanAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralBooleanAccess().getLiteralBooleanAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'LiteralBoolean' 
    {
        createLeafNode(grammarAccess.getLiteralBooleanAccess().getLiteralBooleanKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getLiteralBooleanAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'name' 
    {
        createLeafNode(grammarAccess.getLiteralBooleanAccess().getNameKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralBooleanAccess().getNameString0ParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleString0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralBooleanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"String0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'value' 
    {
        createLeafNode(grammarAccess.getLiteralBooleanAccess().getValueKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralBooleanAccess().getValueBooleanParserRuleCall_5_0(), currentNode); 
	    }
		lv_value_6_0=ruleBoolean		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralBooleanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_6_0, 
	        		"Boolean", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getLiteralBooleanAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleLiteralUnlimitedNatural
entryRuleLiteralUnlimitedNatural returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralUnlimitedNaturalRule(), currentNode); }
	 iv_ruleLiteralUnlimitedNatural=ruleLiteralUnlimitedNatural 
	 { $current=$iv_ruleLiteralUnlimitedNatural.current; } 
	 EOF 
;

// Rule LiteralUnlimitedNatural
ruleLiteralUnlimitedNatural returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralUnlimitedNaturalAccess().getLiteralUnlimitedNaturalAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralUnlimitedNaturalAccess().getLiteralUnlimitedNaturalAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'LiteralUnlimitedNatural' 
    {
        createLeafNode(grammarAccess.getLiteralUnlimitedNaturalAccess().getLiteralUnlimitedNaturalKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getLiteralUnlimitedNaturalAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'name' 
    {
        createLeafNode(grammarAccess.getLiteralUnlimitedNaturalAccess().getNameKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralUnlimitedNaturalAccess().getNameString0ParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleString0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralUnlimitedNaturalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"String0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'value' 
    {
        createLeafNode(grammarAccess.getLiteralUnlimitedNaturalAccess().getValueKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralUnlimitedNaturalAccess().getValueUnlimitedNaturalParserRuleCall_5_0(), currentNode); 
	    }
		lv_value_6_0=ruleUnlimitedNatural		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralUnlimitedNaturalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_6_0, 
	        		"UnlimitedNatural", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getLiteralUnlimitedNaturalAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleLiteralNull
entryRuleLiteralNull returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralNullRule(), currentNode); }
	 iv_ruleLiteralNull=ruleLiteralNull 
	 { $current=$iv_ruleLiteralNull.current; } 
	 EOF 
;

// Rule LiteralNull
ruleLiteralNull returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLiteralNullAccess().getLiteralNullAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralNullAccess().getLiteralNullAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'LiteralNull' 
    {
        createLeafNode(grammarAccess.getLiteralNullAccess().getLiteralNullKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getLiteralNullAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'name' 
    {
        createLeafNode(grammarAccess.getLiteralNullAccess().getNameKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralNullAccess().getNameString0ParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleString0		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralNullRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"String0", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'}' 
    {
        createLeafNode(grammarAccess.getLiteralNullAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Rule VisibilityKind
ruleVisibilityKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'public' 
	{
        $current = grammarAccess.getVisibilityKindAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityKindAccess().getPublicEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'private' 
	{
        $current = grammarAccess.getVisibilityKindAccess().getPrivateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityKindAccess().getPrivateEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'protected' 
	{
        $current = grammarAccess.getVisibilityKindAccess().getProtectedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityKindAccess().getProtectedEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'package' 
	{
        $current = grammarAccess.getVisibilityKindAccess().getPackageEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVisibilityKindAccess().getPackageEnumLiteralDeclaration_3(), null); 
    }
));







// Rule CallConcurrencyKind
ruleCallConcurrencyKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'sequential' 
	{
        $current = grammarAccess.getCallConcurrencyKindAccess().getSequentialEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCallConcurrencyKindAccess().getSequentialEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'guarded' 
	{
        $current = grammarAccess.getCallConcurrencyKindAccess().getGuardedEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCallConcurrencyKindAccess().getGuardedEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'concurrent' 
	{
        $current = grammarAccess.getCallConcurrencyKindAccess().getConcurrentEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCallConcurrencyKindAccess().getConcurrentEnumLiteralDeclaration_2(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


